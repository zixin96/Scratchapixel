cmake_minimum_required(VERSION 3.12)

# this macro iterates over a space-delimited list of C and C++ files (src_files),
# whether it is a header or source file, and assigns each file into 
# a separate group. The group name is constructed based on the path of 
# each individual file. This way we end up with a nice folder-like directory
# structure in the Visual Studio Solution Explorer window
macro(SETUP_GROUPS src_files)
	# iterating over a list of files passed in the src_files parameter
	foreach(FILE ${src_files})
		# get the parent directory
		get_filename_component(PARENT_DIR "${FILE}" DIRECTORY)
		# store the parent directory name as a default group name
		set(GROUP "${PARENT_DIR}")
		# replace all the backslash characters with forward slashes
		string(REPLACE "/" "\\" GROUP "${GROUP}")
		# tell CMake to assign the current file into a source group with this name
		source_group("${GROUP}" FILES "${FILE}")
	endforeach()
endmacro()

# this macro sets different executable filenames for each supported build configuration of this project
# in this way, when we change the build configurations inside visual studio, 
# each build configuration will have its own output filename and can co-exist in a single output folder
macro(SET_OUTPUT_NAMES projName)
	set_target_properties(${projName} PROPERTIES OUTPUT_NAME_DEBUG ${projName}_Debug)
	set_target_properties(${projName} PROPERTIES OUTPUT_NAME_RELEASE ${projName}_Release)
	set_target_properties(${projName} PROPERTIES OUTPUT_NAME_RELWITHDEBINFO ${projName}_ReleaseDebInfo)

	# On Linux/macOS the binaries go to <root>/bin folder
	if (UNIX)
		set_target_properties(${projName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin")
	endif()
endmacro()

# this macro is used as a shortcut to create a new CMake project
# with all the standard properties we want it to have. 
macro(SETUP_APP projName projCategory)
	set(FOLDER_NAME ${projCategory})
	set(PROJECT_NAME ${projName})
	project(${PROJECT_NAME} CXX)

	# collect all source and header files 
	file(GLOB_RECURSE SRC_FILES LIST_DIRECTORIES false RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} src/*.c??)
	file(GLOB_RECURSE HEADER_FILES LIST_DIRECTORIES false RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} src/*.h)

	# In all samples, include its "src" folder as an include directory
	include_directories(src)

	# add all enumerated source and header files to an executable inside the current project
	add_executable(${PROJECT_NAME} ${SRC_FILES} ${HEADER_FILES})

	# set application type to Console (for easier debugging)
	if(MSVC)
		add_definitions(-D_CONSOLE)
	endif()

	# place each source and header file into an appropriate group inside the project
	SETUP_GROUPS("${SRC_FILES}")
	SETUP_GROUPS("${HEADER_FILES}")

	# set different executable filenames for each supported build configuration
	SET_OUTPUT_NAMES(${PROJECT_NAME})

	set_property(TARGET ${PROJECT_NAME} PROPERTY FOLDER ${FOLDER_NAME})
	
	# enforce the use of C++20
	set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 20)
	set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)

	# set the local debugging working directory to where the root CMakeLists.txt resides
	# with this, all assets path can be specified relative to where the root CMakeLists.txt is
	if(MSVC)
		set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")
	endif()
endmacro()